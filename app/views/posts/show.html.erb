<div class="cover-show">
  <div class="container-fluid m-0">
    <div class="title row justify-content-center">
      <h1 class="font-weight-normal mt-5 mb-5">
        <p class="caption"><%= @post.location %></p>
      </h1>
    </div>

    <% if @comment.errors.any? %>
    <div class="card text-center card text-white mb-3">
      <%= @comment.errors.count %>件のエラーが発生しました
      <% @comment.errors.full_messages.each do |message| %>
      <%= message %>
      <% end %>
    </div>
    <% end %>

    <div class="username col-md-4">
      <p class="caption">
        <%= link_to user_path(@post.user) do %>
        <%= attachment_image_tag @post.user, :profile_image, format: 'jpeg', fallback: "logo.png", size: '70x70', class: "rounded-circle" %>
        <%= @post.user.name %>
        <% end %>
      </p>
    </div>

    <div class="images-weather row">
      <div class="images-fovorite col-md-6">
        <div class="main-slider mb-3">
          <% @post.post_images.each do |image| %>
          <%= attachment_image_tag image, :image, format: 'jpeg', size: '300x300' %>
          <% end %>
        </div>
        <div class="thumbnail-slider">
          <% @post.post_images.each do |image| %>
          <%= attachment_image_tag image, :image, format: 'jpeg', size: '100x100', class: 'thumbnail mr-1' %>
          <% end %>
        </div>
        <div id="favorite_btn_<%= @post.id %>">
          <%= render 'favorites/favorite', post: @post %>
        </div>
      </div>

      <div class="text-weather col-md-6">
        <h2>感想</h2>
        <p id="text"><%= @post.text %></p>
        <% if @weather_data.present? %>
        <h2>5日間の天気予報</h2>
        <% daily_forecasts = @weather_data['list'].group_by { |forecast| Time.at(forecast['dt']).strftime('%Y-%m-%d') } %>
        <div class="daily-forecasts-container">
          <% daily_forecasts.each do |date, forecasts| %>
          <div class="daily-forecast">
            <div class="forecast-entries">
              <% forecasts.each do |forecast| %>
              <% if Time.at(forecast['dt']).hour == 12 %>
              <div class="forecast-entry">
                <p><strong><%= Time.at(forecast['dt']).strftime('%m-%d %H:%M') %></strong></p>
                <p>気温: <%= forecast['main']['temp'].to_i %>度</p>
                <p>天気: <%= forecast['weather'][0]['description'] %></p>
                <img src="https://openweathermap.org/img/wn/<%= forecast['weather'][0]['icon'].gsub('n', 'd') %>@2x.png"
                  alt="Weather Icon">
                <% if forecast['pop'].present? %>
                <p>降水確率: <%= (forecast['pop'] * 100).round(-1) %>%</p>
                <% else %>
                <p>降水確率: 0%</p>
                <% end %>
              </div>
              <% end %>
              <% end %>
            </div>
          </div>
          <% end %>
        </div>
        <% else %>
        <p>天気情報が取得できませんでした。</p>
        <% end %>


      </div>
    </div>

    <div class="map-comments row justify-content-center">
      <div class="map col-md-6 mb-3">
        <div id="map_index"></div>
        <div class="map-search mx-md-3 mt-md-2 text-center">
          <div class="d-md-flex flex-wrap justify-content-center">
            <select id="travel-mode-selector" class="form-control mb-2 mb-md-2">
              <option value="WALKING">徒歩</option>
              <option value="DRIVING">車</option>
              <%# <option value="TRANSIT">公共交通機関</option> %>
            </select>
            <%= button_tag "ルートを検索する", id: "btn-search", class: "btn btn-primary ml-md-3", onclick: "search()" %>
            <button id="current-location-button" class="btn btn-primary ml-md-3 m-md-1">現在地を取得する</button>
            <button class="btn btn-secondary ml-md-3 m-md-1" onclick="resetRoute()">検索結果をリセット</button>
          </div>
        </div>
        <div class="map-route mt-3">
          <h5>ルート検索リスト</h5>
          <ul id="route-list" class="list-group"></ul>
        </div>
        <div class="mt-3">
          <h5>各地点間の距離・時間</h5>
          <div id="directions-panel">
            <ul id="display-list" class="list-group"></ul>
          </div>
        </div>
      </div>

      <div class="comments col-md-6 mb-3">
        <div class="comments-form row mb-3">
          <%= form_with(model:[@post, @comment], local: true, html: { class: 'col-md-12' }) do |f| %>
          <%= f.text_area :comment, :size => "60x3", placeholder: "コメントする", class: 'form-control mb-2' %>
          <%= f.submit "送信する", class: "btn btn-success" %>
          <% end %>
        </div>
        <p>コメント件数：<%= @comments.count %></p>
        <% @comments.each do |comment| %>
        <div class="d-flex comments-index mb-2">
          <%= comment.user.name %>
          <%= comment.created_at.strftime('%Y/%m/%d') %><br>
          <%= comment.comment %>
          <% if comment.user == current_user %>
          <div class="comment-delete mt-4">
            <%= link_to "削除", post_comment_path(comment.post, comment), method: :delete, class: "btn-sm btn-danger" %>
          </div>
          <% end %>
        </div>
        <% end %>
        <%= paginate @comments, theme: 'twitter-bootstrap-4' %>
      </div>
    </div>

    <div class="eddel-bt d-flex justify-content-end mb-3">
      <% if @post.user == current_user %>
      <%= link_to '投稿編集', edit_post_path(@post.id), class: "btn btn-info mr-3" %>
      <%= link_to '投稿削除', post_path(@post.id), method: :delete, "data-confirm"=>"本当に消しますか？", class: "btn btn-danger mr-3" %>
      <% end %>
    </div>
  </div>
</div>
</div>



<script>
  // document.addEventListener('DOMContentLoaded', function () {
  //   document.body.setAttribute('data-turbolinks', 'false');
  // });

  let map;
  let service;
  let geocoder;
  let marker = [];
  let infoWindow = null; // InfoWindowのインスタンスを格納
  let directionsRenderer = null; // DirectionsRendererのインスタンスを格納
  const spot = gon.post; // postsコントローラーから現在表示されている投稿のデータを格納
  const spots = gon.posts; // postsコントローラーからスポットのデータを格納
  const spots_location = []; // スポットの場所を格納する配列
  const spots_lat = []; // スポットの緯度を格納する配列
  const spots_lng = []; // スポットの経度を格納する配列
  let currentLocationMarker; // 現在地のマーカー

  // GoogleMapを表示
  function initMap() {
    geocoder = new google.maps.Geocoder();
    map = new google.maps.Map(document.getElementById('map_index'), {
      center: {
        lat: spot.latitude,
        lng: spot.longitude
      },
      zoom: 16,
    });

    // スポットの数分繰り返し処理を行いマップ上表示
    for (let i = 0; i < spots.length; i++) {
      const markerLatLng = new google.maps.LatLng({
        lat: spots[i]['latitude'],
        lng: spots[i]['longitude']
      });

      // マーカーの表示
      marker[i] = new google.maps.Marker({
        position: markerLatLng,
        map: map
      });

      // 吹き出しの表示
      let id = spots[i]['id'];
      spots_location[i] = spots[i]['location'];
      spots_lat[i] = spots[i]['latitude'];
      spots_lng[i] = spots[i]['longitude'];
      infoWindow = new google.maps.InfoWindow();

      // 吹き出しをクリックしたときの処理（中身を設定し、ボタンを追加）
      google.maps.event.addListener(marker[i], 'click', function () {
        infoWindow.setContent(
          `<a href='/posts/${id}'>${spots[i]['location']}</a><button onclick="addPost(${i})">追加</button>`);
        infoWindow.open(map, marker[i]);
      });
    }

    // 周辺のカフェを検索
    searchPlaces({
      lat: spot.latitude,
      lng: spot.longitude
    });
  }

  // 現在地を取得しマーカーを追加、ボタンにクリックイベントを追加
  const currentLocationButton = document.getElementById('current-location-button');
  currentLocationButton.addEventListener('click', getCurrentLocationAndAddMarker);

  // 現在地を取得しマーカーを追加
  function getCurrentLocationAndAddMarker() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
        const currentLatLng = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        if (currentLocationMarker) {
          currentLocationMarker.setMap(null);
        }
        currentLocationMarker = new google.maps.Marker({
          position: currentLatLng,
          map: map,
          title: "現在地"
        });

        currentLocationMarker.addListener('click', function () {
          infoWindow.setContent(
            `<strong> 現在地 </strong><button onclick="addPost(-1)">追加</button>`
          );
          infoWindow.open(map, currentLocationMarker);
        });

        map.setCenter(currentLatLng);

        // 周辺のカフェを検索
        searchPlaces(currentLatLng);
      });
    } else {
      alert("このブラウザでは位置情報が利用できません");
    }
  }

  // Places APIを使用して周辺カフェを検索
  function searchPlaces(location) {
    service = new google.maps.places.PlacesService(map);

    if (service) {
      const request = {
        location: location,
        radius: 300,
        types: ['cafe'] // カフェを検索
      };

      service.nearbySearch(request, function (results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          for (let i = 0; i < results.length; i++) {
            createMarker(results[i]);
          }
        }
      });
    } else {
      console.error('PlacesService is not available.');
    }
  }

  // Places APIの検索結果に基づいてマーカーを作成
  function createMarker(place) {
    const placeLoc = place.geometry.location;

    const customIconUrl = '<%= asset_path("cafe32.png") %>';
    const marker = new google.maps.Marker({
      map: map,
      position: placeLoc,
      icon: customIconUrl
    });

    // Places APIの詳細情報を取得
    google.maps.event.addListener(marker, 'click', function () {
      const request = {
        placeId: place.place_id,
        fields: ['name', 'formatted_address', 'formatted_phone_number', 'website', 'rating', 'opening_hours',
          'photos'
        ]
      };

      service.getDetails(request, function (placeDetails, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          // 詳細情報を含む情報ウィンドウを作成
          infoWindow.setContent(formatPlaceDetails(placeDetails, placeLoc));
          infoWindow.open(map, marker);
        }
      });
    });
  }

  // PlaceDetailsを整形する関数
  function formatPlaceDetails(placeDetails, placeLoc) {
    let content = '<div style="text-align: center;">';
    content += '<div style="display: flex; align-items: center;">';
    content += '<strong style="margin: auto;">' + placeDetails.name + '</strong><br>';
    content +=
      `<button onclick="addPostFromInfoWindow(${placeLoc.lat()}, ${placeLoc.lng()}, '${placeDetails.name}')">追加</button>`;
    content += '</div>';
    content += `住所: ${placeDetails.formatted_address}<br>`;
    content += `電話番号: ${placeDetails.formatted_phone_number}<br>`;

    if (placeDetails.website) {
      content += `ウェブサイト: <a href="${placeDetails.website}" target="_blank">${placeDetails.website}</a><br>`;
    }

    if (placeDetails.rating) {
      content += `評価: ${placeDetails.rating}/5<br>`;
    }

    if (placeDetails.opening_hours) {
      content += '<div style="list-style: none;">';
      content += '営業時間:<br>';
      content += '<ul style="padding: 0; margin: 0;">';
      placeDetails.opening_hours.weekday_text.forEach((weekdayText) => {
        content += `<li>${weekdayText}</li>`;
      });
      content += '</ul>';
      content += '</div>';
    }

    // 写真が存在する場合のみ処理
    if (placeDetails.photos && placeDetails.photos.length > 0) {
      content += '<div>';

      // １枚目の画像だけを取得
      const firstPhoto = placeDetails.photos[0];
      const imageUrl = firstPhoto.getUrl({
        maxWidth: 200,
        maxHeight: 200
      });
      content += `<img src="${imageUrl}" alt="Place Photo"><br>`;

      content += '</div>';
    }

    content += '</div>';

    return content;
  }

  // インフォウィンドウ内から追加ボタンを押したときにリストに追加
  function addPostFromInfoWindow(lat, lng, location) {
    const li = document.createElement('li');
    li.textContent = location;
    li.className = "list-group-item";
    li.setAttribute("data-lat", lat);
    li.setAttribute("data-lng", lng);

    const routeList = document.getElementById('route-list');
    routeList.appendChild(li);

    infoWindow.close();
  }

  // 検索リストにスポットを追加
  function addPost(number) {
    const li = document.createElement('li');
    if (number === -1) {
      li.textContent = "現在置";
    } else {
      li.textContent = spots_location[number];
    }

    li.className = "list-group-item";

    // li要素にdata-lat,lngのデータ属性を追加
    if (number === -1) {
      li.setAttribute("data-lat", currentLocationMarker.getPosition().lat());
      li.setAttribute("data-lng", currentLocationMarker.getPosition().lng());
    } else {
      li.setAttribute("data-lat", spots_lat[number]);
      li.setAttribute("data-lng", spots_lng[number]);
    }

    const routeList = document.getElementById('route-list');
    routeList.appendChild(li);

    infoWindow.close();
  }

  // ルートを検索
  function search() {
    const points = $('#route-list li');
    if (points.length >= 2) {
      let origin;
      let destination;
      const waypoints = [];

      for (let i = 0; i < points.length; i++) {
        points[i] = new google.maps.LatLng($(points[i]).attr("data-lat"), $(points[i]).attr("data-lng"));
        if (i == 0) {
          origin = points[i];
        } else if (i == points.length - 1) {
          destination = points[i];
        } else {
          waypoints.push({
            location: points[i],
            stopover: true
          });
        }
      }

      const selectedTravelMode = $('#travel-mode-selector').val();

      const request = {
        origin: origin,
        destination: destination,
        waypoints: waypoints,
        travelMode: google.maps.TravelMode[selectedTravelMode],
      };

      if (directionsRenderer) {
        directionsRenderer.setMap(null); // 既存のルートをクリア
      }

      directionsRenderer = new google.maps.DirectionsRenderer({
        map: map,
        suppressMarkers: true,
        panel: document.getElementById('directions-panel'),
        polylineOptions: {
          strokeColor: '#00ffdd',
          strokeOpacity: 1,
          strokeWeight: 5
        }
      });

      const directionsPanel = document.getElementById('directions-panel');
      directionsPanel.className = 'directions-panel-bg';

      new google.maps.DirectionsService().route(request, function (response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          directionsRenderer.setDirections(response);
        } else {
          alert('ルートを見つけることができませんでした: ' + status);
        }
      });
    } else {
      alert('2つ以上の地点を追加してください。');
    }
  }

  // 検索結果とリストをリセット
  function resetRoute() {
    if (directionsRenderer) {
      directionsRenderer.setMap(null); // ルートをクリア
    }

    const routeList = document.getElementById('route-list');
    routeList.innerHTML = ''; // リストをクリア

    const directionsPanel = document.getElementById('directions-panel');
    directionsPanel.innerHTML = ''; // 検索結果をクリア
  }
</script>

<script async
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&libraries=places&callback=initMap">
</script>

<script>
  $(document).ready(function () {
    $('.main-slider').slick({
      slidesToShow: 1,
      asNavFor: '.thumbnail-slider',
      arrows: false,
    });

    $('.thumbnail-slider').slick({
      slidesToShow: 9,
      asNavFor: '.main-slider',
      focusOnSelect: true,
    });

  });
</script>