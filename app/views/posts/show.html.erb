<script>
var map
var geocoder
var marker = [];
var infoWindow = [];
var markerData = gon.post; // コントローラーで定義したインスタンス変数を変数に代入
var spot = gon.posts;
var post_location = [];
var post_lat = [];
var post_lng = [];

// GoogleMapを表示する関数(callback処理で呼び出される)
function initMap(){
  geocoder = new google.maps.Geocoder()
  // ビューのid='map_index'の部分にGoogleMapを埋め込む
  map = new google.maps.Map(document.getElementById('map_index'), {
    center: { lat: markerData.latitude, lng: markerData.longitude }, // 投稿された時の経度・緯度を設定
    zoom: 9,
  });

  // 繰り返し処理でマーカーと吹き出しを複数表示させる
  for (var i = 0; i < spot.length; i++) {
    // 各地点の緯度経度を算出
    markerLatLng = new google.maps.LatLng({
      lat: spot[i]['latitude'],
      lng: spot[i]['longitude']
    });

    // マーカーの表示
    marker[i] = new google.maps.Marker({
      position: markerLatLng,
      map: map
    });

    // 吹き出しの表示
    let id = spot[i]['id']
    post_location[i]= spot[i]['location'];
    post_lat[i]= spot[i]['latitude'];
    post_lng[i]= spot[i]['longitude'];
    infoWindow[i] = new google.maps.InfoWindow({
      // 吹き出しの中身, 引数で各属性の配列と配列番号を渡す
      content: `<a href='/posts/${ id }'>${ spot[i]['location'] }</a><input type="button" value="追加" onclick="addPost(post_location, post_lat, post_lng, ${i})">`
    });
    markerEvent(i);
  }
}

// マーカーをクリックしたら吹き出しを表示
function markerEvent(i) {
  marker[i].addListener('click', function () {
    infoWindow[i].open(map, marker[i]);
  });
}


// リストに追加する
function addPost(location, lat, lng, number){
  var li = $('<li>', {
    text: location[number],
    "class": "list-group-item"
  });
  li.attr("data-lat", lat[number]); // data-latという属性にlat[number]を入れる
  li.attr("data-lng", lng[number]); // data-lngという属性にlng[number]を入れる
  $('#route-list').append(li); // idがroute-listの要素の一番後ろにliを追加
}

// ルートを検索する
function search() {
  var points = $('#route-list li');

  // 2地点以上のとき
  if (points.length >= 2){
      var origin; // 開始地点
      var destination; // 終了地点
      var waypoints = []; // 経由地点

      // origin, destination, waypointsを設定する
      for (var i = 0; i < points.length; i++) {
          points[i] = new google.maps.LatLng($(points[i]).attr("data-lat"), $(points[i]).attr("data-lng"));
          if (i == 0){
            origin = points[i];
          } else if (i == points.length-1){
            destination = points[i];
          } else {
            waypoints.push({ location: points[i], stopover: true });
          }
      }
      // リクエストの作成
      var request = {
        origin:      origin,
        destination: destination,
        waypoints: waypoints,
        travelMode:  google.maps.TravelMode.DRIVING
      };
      // ルートサービスのリクエスト
      new google.maps.DirectionsService().route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers : true,
            polylineOptions: { // 描画される線についての設定
              strokeColor: '#00ffdd',
              strokeOpacity: 1,
              strokeWeight: 5
            }
          }).setDirections(response);//ライン描画部分

            // 距離、時間を表示する
            var data = response.routes[0].legs;
            for (var i = 0; i < data.length; i++) {
                // 距離
                var li = $('<li>', {
                  text: data[i].distance.text,
                  "class": "display-group-item"
                });
                $('#display-list').append(li);

                // 時間
                var li = $('<li>', {
                  text: data[i].duration.text,
                  "class": "display-group-item"
                });
                $('#display-list').append(li);
            }
            const route = response.routes[0];
            // ビューのid='directions-panel'の部分に埋め込む
            const summaryPanel = document.getElementById("directions-panel");
            summaryPanel.innerHTML = "";

            // 各地点間の距離・時間を表示
            for (let i = 0; i < route.legs.length; i++) {
              const routeSegment = i + 1;
              summaryPanel.innerHTML +=
                "<b>ルート " + routeSegment + "</b><br>";
              summaryPanel.innerHTML += route.legs[i].start_address + "<br>" + " ↓ " + "<br>";
              summaryPanel.innerHTML += route.legs[i].end_address + "<br>";
              summaryPanel.innerHTML += "<" + route.legs[i].distance.text + ",";
              summaryPanel.innerHTML += route.legs[i].duration.text + ">" + "<br>";
            }
        }
      });
  }
}
</script>

<div class="cover-show">
  <div class="container justify-content-center">
    <div class="row justify-content-center">
      <h1 class="font-weight-normal mt-5 mb-5">
      <p class="caption"><%= @post.location %>
      </h1>
    </div>
    <% if @comment.errors.any? %>
      <div class="card text-center card text-white bg-danger mb-3">
      <%= @comment.errors.count %>件のエラーが発生しました
      <% @comment.errors.full_messages.each do |message| %>
      <%= message %>
      <% end %>
      </div>
    <% end %>
    <div class="d-flex">
      <div class="row justify-content-center d-block">
          <p class="caption justify-content-start"><%= @post.user.name %></p>
        <div class="d-flex justify-content-end mb-3 mr-1">
            <% if @post.user == current_user %>
              <%= link_to '編集する', edit_post_path(@post.id), class: "btn btn-info mr-3" %>
              <%= link_to '削除する', post_path(@post.id),method: :delete, "data-confirm"=>"本当に消しますか？", class: "btn btn-danger mr-3" %>
            <% end %>
            <%= link_to '投稿一覧ページへ', posts_path, class: "btn btn-dark" %>
        </div>

      <div class="justify-content-between ml-1">
      <% @post.post_images.each do |image| %>
        <%= attachment_image_tag image, :image, format: 'jpeg', size: '190x133' %>
      <% end %>      
      </div>
      <div id="favorite_btn_<%= @post.id %>">
        <%= render 'favorites/favorite', post: @post %>
      </div>
      </p>
      <div class="text ml-1">
      <h2>感想</h2>
      <p id="text"><%= @post.text %></p>
      </div>
<div class="map-comments row">
<div class="map col ml-1 mb-3">
      <div id = 'map_index'></div>
        <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap"></script>

        <div class="map-route">
          < ルート検索リスト >
          <ul id = "route-list" class = "list-group"> 
        </div>

      <div id = 'directions-panel'> 
        < 各地点間の距離・時間 >
        <ul id = "display-list" class = "display-group">
      </div>

        <div class="map-search">
          <%= button_tag "ルート検索", id: "btn-search", class: "btn btn-primary", onclick:     "search()" %>
        </div>
                        </div>

        
    <div class="comments ml-5 col-xs-6">
        <%= form_with(model:[@post, @comment], local: true) do |f| %>
        <%= f.text_area :comment, :size=>"60x3",placeholder: "コメントする" %>
        <%= f.submit "送信する", class: "btn btn-success mb-4" %>
        <% end %>

        <p>コメント件数：<%= @comments.count %></p>
        <% @comments.each do |comment| %>
	  <div class="comments-index mb-2">
          <%= comment.user.name %>
          <%= comment.created_at.strftime('%Y/%m/%d') %><br>
      <%# <div class="d-flex"> %>
            <%= comment.comment %>
            <% if comment.user == current_user %>
            <div class="comment-delete">
              <%= link_to "削除", post_comment_path(comment.post, comment), method: :delete, class: "btn-sm btn-danger" %>
            <%# </div> %>
            <% end %>
          </div>
        </div>
        <% end %>

        <%= paginate @comments, theme: 'twitter-bootstrap-4' %>
      </div>
    </div>

  </div>
</div>