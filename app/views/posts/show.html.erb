<div class="cover-show">
  <div class="container justify-content-center">

    <div class="row justify-content-center">
      <h1 class="font-weight-normal mt-5 mb-5">
        <p class="caption"><%= @post.location %>
      </h1>
    </div>

    <% if @comment.errors.any? %>
    <div class="card text-center card text-white mb-3">
      <%= @comment.errors.count %>件のエラーが発生しました
      <% @comment.errors.full_messages.each do |message| %>
      <%= message %>
      <% end %>
    </div>
    <% end %>

    <div class="d-flex">

      <div class="row justify-content-center d-block">
        <p class="caption justify-content-start">
          <%= link_to user_path(@post.user) do %>
          <%= attachment_image_tag @post.user, :profile_image, format: 'jpeg', fallback: "logo.png", size: '70x70', class: "rounded-circle" %>
          <%= @post.user.name %>
          <% end %>
        </p>

        <div class="d-flex justify-content-end mb-3 mr-1">
          <% if @post.user == current_user %>
          <%= link_to '編集する', edit_post_path(@post.id), class: "btn btn-info mr-3" %>
          <%= link_to '削除する', post_path(@post.id),method: :delete, "data-confirm"=>"本当に消しますか？", class: "btn btn-danger mr-3" %>
          <% end %>
          <%= link_to '投稿一覧ページへ', posts_path, class: "btn btn-dark" %>
        </div>

        <div class="main-slider mb-3">
          <% @post.post_images.each do |image| %>
          <%= attachment_image_tag image, :image, format: 'jpeg', size: '300x300' %>
          <% end %>
        </div>

        <div class="thumbnail-slider">
          <% @post.post_images.each do |image| %>
          <%= attachment_image_tag image, :image, format: 'jpeg', size: '100x100', class: 'thumbnail mr-1' %>
          <% end %>
        </div>

        <div id="favorite_btn_<%= @post.id %>">
          <%= render 'favorites/favorite', post: @post %>
        </div>

        <%# </p> %>

        <div class="text ml-1">
          <h2>感想</h2>
          <p id="text"><%= @post.text %></p>
        </div>

        <div class="map-comments row">
          <div class="map col ml-1 mb-3">
            <div id='map_index'></div>
            <select id="travel-mode-selector">
              <option value="WALKING">徒歩</option>
              <option value="DRIVING">車</option>
              <option value="TRANSIT">公共交通機関</option>
            </select>

            <div class="map-route">
              < ルート検索リスト>
                <ul id="route-list" class="list-group">
            </div>

            <div id='directions-panel'>
              < 各地点間の距離・時間>
                <ul id="display-list" class="display-group">
            </div>

            <div class="map-search">
              <button id="current-location-button" class="btn btn-primary">現在地を取得する</button>
              <%= button_tag "ルートを検索する", id: "btn-search", class: "btn btn-primary", onclick: "search()" %>
            </div>
          </div>

          <div class="comments ml-5 col-xs-6">
            <%= form_with(model:[@post, @comment], local: true) do |f| %>
            <%= f.text_area :comment, :size=>"60x3",placeholder: "コメントする" %>
            <%= f.submit "送信する", class: "btn btn-success mb-4" %>
            <% end %>
            <p>コメント件数：<%= @comments.count %></p>
            <% @comments.each do |comment| %>

            <div class="comments-index mb-2">
              <%= comment.user.name %>
              <%= comment.created_at.strftime('%Y/%m/%d') %><br>
              <%= comment.comment %>
              <% if comment.user == current_user %>
              <div class="comment-delete">
                <%= link_to "削除", post_comment_path(comment.post, comment), method: :delete, class: "btn-sm btn-danger" %>
                <% end %>
              </div>
            </div>
            <% end %>
            <%= paginate @comments, theme: 'twitter-bootstrap-4' %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let map;
  let geocoder;
  let marker = [];
  let infoWindow = [];
  const spot = gon.post; // postsコントローラーから現在表示されている投稿のデータを格納
  const spots = gon.posts; // postsコントローラーからスポットのデータを格納
  const spots_location = []; // スポットの場所を格納する配列
  const spots_lat = []; // スポットの緯度を格納する配列
  const spots_lng = []; // スポットの経度を格納する配列
  let currentLocationMarker; // 現在地のマーカー

  // GoogleMapを表示
  function initMap() {
    geocoder = new google.maps.Geocoder();

    // ビューのid='map_index'にGoogleMapを埋め込み
    map = new google.maps.Map(document.getElementById('map_index'), {
      center: {
        lat: spot.latitude,
        lng: spot.longitude
      },
      zoom: 9,
    });

    // スポットの数分繰り返し処理を行いマップ上表示
    for (let i = 0; i < spots.length; i++) {
      const markerLatLng = new google.maps.LatLng({
        lat: spots[i]['latitude'],
        lng: spots[i]['longitude']
      });

      // マーカーの表示
      marker[i] = new google.maps.Marker({
        position: markerLatLng,
        map: map
      });

      // 吹き出しの表示
      let id = spots[i]['id'];
      spots_location[i] = spots[i]['location'];
      spots_lat[i] = spots[i]['latitude'];
      spots_lng[i] = spots[i]['longitude'];
      infoWindow[i] = new google.maps.InfoWindow({
        // 吹き出しの中身を設定し、ボタンを追加
        content: `<a href='/posts/${id}'>${spots[i]['location']}</a><input type="button" value="追加" onclick="addPost(spots_location, spots_lat, spots_lng, ${i})">`
      });

      markerEvent(i);
    }
  }

  // マーカーをクリック時情報ウィンドウを表示
  function markerEvent(i) {
    marker[i].addListener('click', function () {
      infoWindow[i].open(map, marker[i]);
    });
  }

  // 現在地を取得しマーカーを追加、ボタンにクリックイベントを追加
  const currentLocationButton = document.getElementById('current-location-button');
  currentLocationButton.addEventListener('click', getCurrentLocationAndAddMarker);

  const customMarkerIcon = {
    fillColor: 'red',
    fillOpacity: 1,
    scale: 10,
  };

  // 現在地を取得しマーカーを追加
  function getCurrentLocationAndAddMarker() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
        const currentLatLng = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        if (currentLocationMarker) {
          // 現在地マーカーがすでに存在する場合削除する
          currentLocationMarker.setMap(null);
        }
        currentLocationMarker = new google.maps.Marker({
          position: currentLatLng,
          map: map,
          title: "現在地"
        });

        // マーカーをクリック時、情報ウィンドウを表示
        currentLocationMarker.addListener('click', function () {
          let contentString = "現在の位置";
          contentString +=
            `<input type="button" value="追加" onclick="addPost(['現在置'], [${currentLatLng.lat}], [${currentLatLng.lng}], -1)">`;

          infoWindow[infoWindow.length] = new google.maps.InfoWindow({
            content: contentString
          });
          infoWindow[infoWindow.length - 1].open(map, currentLocationMarker);
        });

        map.setCenter(currentLatLng);
      });
    } else {
      alert("このブラウザでは位置情報が利用できません");
    }
  }

  // 検索リストにスポットを追加
  function addPost(location, lat, lng, number) {
    // <li>要素作成
    const li = document.createElement('li');

    if (number === -1) {
      // 現在地情報の場合
      li.textContent = location;
    } else {
      li.textContent = location[number];
    }

    li.className = "list-group-item";

    if (number === -1) {
      // 現在地情報の場合
      li.setAttribute("data-lat", lat);
      li.setAttribute("data-lng", lng);
    } else {
      // スポットの場合
      li.setAttribute("data-lat", lat[number]);
      li.setAttribute("data-lng", lng[number]);
    }

    // id が route-list の要素の末尾に <li> 要素を追加
    const routeList = document.getElementById('route-list');
    routeList.appendChild(li);
  }

  // ドロップダウンメニューで移動方法を選択できる
  const travelModeSelector = document.getElementById('travel-mode-selector');

  // ルートを検索
  function search() {

    const points = $('#route-list li');

    // 2つ以上の地点が選択された場合
    if (points.length >= 2) {
      let origin;
      let destination;
      const waypoints = [];

      for (let i = 0; i < points.length; i++) {
        points[i] = new google.maps.LatLng($(points[i]).attr("data-lat"), $(points[i]).attr("data-lng"));
        if (i == 0) {
          origin = points[i];
        } else if (i == points.length - 1) {
          destination = points[i];
        } else {
          waypoints.push({
            location: points[i],
            stopover: true
          });
        }
      }

      // 選択された移動方法を取得
      const selectedTravelMode = travelModeSelector.value;

      // ルート検索のリクエストを作成
      const request = {
        origin: origin,
        destination: destination,
        waypoints: waypoints,
        travelMode: google.maps.TravelMode[selectedTravelMode],
      };

      // ルートサービスのリクエスト
      new google.maps.DirectionsService().route(request, function (response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers: true,
            panel: document.getElementById('directions-panel'),
            polylineOptions: {
              strokeColor: '#00ffdd',
              strokeOpacity: 1,
              strokeWeight: 5
            }
          }).setDirections(response);
        } else {
          alert('ルートを見つけることができませんでした: ' + status);
        }
      });
    } else {
      alert('2つ以上の地点を追加してください。');
    }
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap"></script>

<script>
$(document).ready(function () {
  $('.main-slider').slick({
    slidesToShow: 1,
    asNavFor: '.thumbnail-slider',
    arrows: false,
  });

  $('.thumbnail-slider').slick({
    slidesToShow: 9,
    asNavFor: '.main-slider',
    focusOnSelect: true,
  });

});
</script>